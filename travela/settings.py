'''
Django settings for travela project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
'''
import io
import os
from pathlib import Path

import environ
import google.auth
from google.cloud import secretmanager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env_file = os.path.join(BASE_DIR, '.env')
DEBUG = False
env = environ.Env()
os.environ['ENV'] = 'PROD'
os.environ['GOOGLE_CLOUD_PROJECT'] = 'procon-1'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-abz_x^dprw-6t=hq=2iphkcvc-okg0m16^u6^mp6nenc(!)ebv'

# Attempt to load the Project ID into the environment, safely failing on error.
try:
    google.auth.default()
except google.auth.exceptions.DefaultCredentialsError:
    print('Exception on google.auth.default()')

if os.path.isfile(env_file):
    # DEV: Use a local secret file
    print('Found local .env file.')
    env.read_env(env_file, overwrite=True)
elif os.environ.get('ENV') == 'PROD':
    # Production
    print('Reading env from secret manager.')
    project_id = os.environ.get('GOOGLE_CLOUD_PROJECT')
    client = secretmanager.SecretManagerServiceClient()
    secret_name = os.environ.get('SETTINGS_NAME', 'travela_settings')
    full_secret_name = f'projects/{project_id}/secrets/{secret_name}/versions/latest' # pylint: disable=invalid-name
    payload = client.access_secret_version(name=full_secret_name).payload.data.decode('UTF-8')
    env.read_env(io.StringIO(payload), overrides=True)
else:
    # Some other environment
    print('No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.')


GENERATIVE_LANGUAGE_API_KEY = os.getenv('GENERATIVE_LANGUAGE_API_KEY', 'test_api_key')
GCLOUD_SERVICE_ACCT_INFO = {
    'type': 'service_account',
    'project_id': os.getenv('GOOGLE_CLOUD_PROJECT', 'test_project_id'),
    'private_key_id': os.getenv('SA_PRIVATE_KEY_ID', 'test_sa_private_key_id'),
    'private_key': os.getenv('SA_PRIVATE_KEY', 'test_sa_private_key'),
    'client_email': os.getenv('SA_CLIENT_EMAIL', 'test_sa_client_email'),
}

print(GENERATIVE_LANGUAGE_API_KEY)
print(GCLOUD_SERVICE_ACCT_INFO)


ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'audiointro',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'travela.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'travela.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
